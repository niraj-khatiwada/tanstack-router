// This file is auto-generated by @hey-api/openapi-ts

import {
  infiniteQueryOptions,
  queryOptions,
  type InfiniteData,
  type UseMutationOptions,
} from '@tanstack/react-query'
import { client as _heyApiClient } from '../client.gen'
import {
  fileControllerUploadFile,
  fileControllerUploadFiles,
  healthControllerCheck,
  prometheusControllerIndex,
  userControllerDeleteUser,
  userControllerFindAllUsers,
  userControllerFindAllUsersCursor,
  userControllerFindUser,
  userControllerGetCurrentUser,
  userControllerUpdateUserProfile,
  type Options,
} from '../sdk.gen'
import type {
  FileControllerUploadFileData,
  FileControllerUploadFileError,
  FileControllerUploadFileResponse,
  FileControllerUploadFilesData,
  FileControllerUploadFilesError,
  FileControllerUploadFilesResponse,
  HealthControllerCheckData,
  PrometheusControllerIndexData,
  UserControllerDeleteUserData,
  UserControllerDeleteUserError,
  UserControllerFindAllUsersCursorData,
  UserControllerFindAllUsersData,
  UserControllerFindAllUsersError,
  UserControllerFindAllUsersResponse,
  UserControllerFindUserData,
  UserControllerGetCurrentUserData,
  UserControllerUpdateUserProfileData,
  UserControllerUpdateUserProfileError,
  UserControllerUpdateUserProfileResponse,
} from '../types.gen'

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const prometheusControllerIndexQueryKey = (
  options?: Options<PrometheusControllerIndexData>,
) => createQueryKey('prometheusControllerIndex', options)

export const prometheusControllerIndexOptions = (
  options?: Options<PrometheusControllerIndexData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await prometheusControllerIndex({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: prometheusControllerIndexQueryKey(options),
  })
}

export const healthControllerCheckQueryKey = (
  options?: Options<HealthControllerCheckData>,
) => createQueryKey('healthControllerCheck', options)

export const healthControllerCheckOptions = (
  options?: Options<HealthControllerCheckData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthControllerCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: healthControllerCheckQueryKey(options),
  })
}

export const userControllerGetCurrentUserQueryKey = (
  options?: Options<UserControllerGetCurrentUserData>,
) => createQueryKey('userControllerGetCurrentUser', options)

export const userControllerGetCurrentUserOptions = (
  options?: Options<UserControllerGetCurrentUserData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerGetCurrentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: userControllerGetCurrentUserQueryKey(options),
  })
}

export const userControllerFindAllUsersQueryKey = (
  options?: Options<UserControllerFindAllUsersData>,
) => createQueryKey('userControllerFindAllUsers', options)

export const userControllerFindAllUsersOptions = (
  options?: Options<UserControllerFindAllUsersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerFindAllUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: userControllerFindAllUsersQueryKey(options),
  })
}

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>,
>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = queryKey[0]
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    }
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    }
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    }
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    }
  }
  return params as unknown as typeof page
}

export const userControllerFindAllUsersInfiniteQueryKey = (
  options?: Options<UserControllerFindAllUsersData>,
): QueryKey<Options<UserControllerFindAllUsersData>> =>
  createQueryKey('userControllerFindAllUsers', options, true)

export const userControllerFindAllUsersInfiniteOptions = (
  options?: Options<UserControllerFindAllUsersData>,
) => {
  return infiniteQueryOptions<
    UserControllerFindAllUsersResponse,
    UserControllerFindAllUsersError,
    InfiniteData<UserControllerFindAllUsersResponse>,
    QueryKey<Options<UserControllerFindAllUsersData>>,
    | number
    | Pick<
        QueryKey<Options<UserControllerFindAllUsersData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<UserControllerFindAllUsersData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await userControllerFindAllUsers({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: userControllerFindAllUsersInfiniteQueryKey(options),
    },
  )
}

export const userControllerFindAllUsersCursorQueryKey = (
  options?: Options<UserControllerFindAllUsersCursorData>,
) => createQueryKey('userControllerFindAllUsersCursor', options)

export const userControllerFindAllUsersCursorOptions = (
  options?: Options<UserControllerFindAllUsersCursorData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerFindAllUsersCursor({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: userControllerFindAllUsersCursorQueryKey(options),
  })
}

export const userControllerDeleteUserMutation = (
  options?: Partial<Options<UserControllerDeleteUserData>>,
): UseMutationOptions<
  unknown,
  UserControllerDeleteUserError,
  Options<UserControllerDeleteUserData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    UserControllerDeleteUserError,
    Options<UserControllerDeleteUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userControllerDeleteUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const userControllerFindUserQueryKey = (
  options: Options<UserControllerFindUserData>,
) => createQueryKey('userControllerFindUser', options)

export const userControllerFindUserOptions = (
  options: Options<UserControllerFindUserData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await userControllerFindUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: userControllerFindUserQueryKey(options),
  })
}

export const userControllerUpdateUserProfileMutation = (
  options?: Partial<Options<UserControllerUpdateUserProfileData>>,
): UseMutationOptions<
  UserControllerUpdateUserProfileResponse,
  UserControllerUpdateUserProfileError,
  Options<UserControllerUpdateUserProfileData>
> => {
  const mutationOptions: UseMutationOptions<
    UserControllerUpdateUserProfileResponse,
    UserControllerUpdateUserProfileError,
    Options<UserControllerUpdateUserProfileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await userControllerUpdateUserProfile({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const fileControllerUploadFileQueryKey = (
  options: Options<FileControllerUploadFileData>,
) => createQueryKey('fileControllerUploadFile', options)

export const fileControllerUploadFileOptions = (
  options: Options<FileControllerUploadFileData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fileControllerUploadFile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: fileControllerUploadFileQueryKey(options),
  })
}

export const fileControllerUploadFileMutation = (
  options?: Partial<Options<FileControllerUploadFileData>>,
): UseMutationOptions<
  FileControllerUploadFileResponse,
  FileControllerUploadFileError,
  Options<FileControllerUploadFileData>
> => {
  const mutationOptions: UseMutationOptions<
    FileControllerUploadFileResponse,
    FileControllerUploadFileError,
    Options<FileControllerUploadFileData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await fileControllerUploadFile({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const fileControllerUploadFilesQueryKey = (
  options: Options<FileControllerUploadFilesData>,
) => createQueryKey('fileControllerUploadFiles', options)

export const fileControllerUploadFilesOptions = (
  options: Options<FileControllerUploadFilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fileControllerUploadFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: fileControllerUploadFilesQueryKey(options),
  })
}

export const fileControllerUploadFilesMutation = (
  options?: Partial<Options<FileControllerUploadFilesData>>,
): UseMutationOptions<
  FileControllerUploadFilesResponse,
  FileControllerUploadFilesError,
  Options<FileControllerUploadFilesData>
> => {
  const mutationOptions: UseMutationOptions<
    FileControllerUploadFilesResponse,
    FileControllerUploadFilesError,
    Options<FileControllerUploadFilesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await fileControllerUploadFiles({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}
