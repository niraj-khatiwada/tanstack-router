// This file is auto-generated by @hey-api/openapi-ts

import {
  type Client,
  type Options as ClientOptions,
  formDataBodySerializer,
  type TDataShape,
} from '@hey-api/client-fetch'
import { client as _heyApiClient } from './client.gen'
import type {
  FileControllerUploadFileData,
  FileControllerUploadFilesData,
  HealthControllerCheckData,
  HealthControllerCheckError,
  HealthControllerCheckResponse,
  PrometheusControllerIndexData,
  UserControllerDeleteUserData,
  UserControllerDeleteUserError,
  UserControllerFindAllUsersCursorData,
  UserControllerFindAllUsersCursorError,
  UserControllerFindAllUsersCursorResponse,
  UserControllerFindAllUsersData,
  UserControllerFindAllUsersError,
  UserControllerFindAllUsersResponse,
  UserControllerFindUserData,
  UserControllerFindUserError,
  UserControllerFindUserResponse,
  UserControllerGetCurrentUserData,
  UserControllerGetCurrentUserError,
  UserControllerGetCurrentUserResponse,
} from './types.gen'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

export const prometheusControllerIndex = <ThrowOnError extends boolean = false>(
  options?: Options<PrometheusControllerIndexData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>(
    {
      url: '/api/metrics',
      ...options,
    },
  )
}

/**
 * Health check
 */
export const healthControllerCheck = <ThrowOnError extends boolean = false>(
  options?: Options<HealthControllerCheckData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthControllerCheckResponse,
    HealthControllerCheckError,
    ThrowOnError
  >({
    url: '/api/health',
    ...options,
  })
}

/**
 * Get current user
 */
export const userControllerGetCurrentUser = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserControllerGetCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UserControllerGetCurrentUserResponse,
    UserControllerGetCurrentUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/user/whoami',
    ...options,
  })
}

/**
 * List users.
 */
export const userControllerFindAllUsers = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserControllerFindAllUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UserControllerFindAllUsersResponse,
    UserControllerFindAllUsersError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/user/all',
    ...options,
  })
}

/**
 * List users via cursor.
 */
export const userControllerFindAllUsersCursor = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<UserControllerFindAllUsersCursorData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UserControllerFindAllUsersCursorResponse,
    UserControllerFindAllUsersCursorError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/user/all/cursor',
    ...options,
  })
}

/**
 * Delete a user
 */
export const userControllerDeleteUser = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerDeleteUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    UserControllerDeleteUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/user/{id}',
    ...options,
  })
}

/**
 * Find user by id
 */
export const userControllerFindUser = <ThrowOnError extends boolean = false>(
  options: Options<UserControllerFindUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    UserControllerFindUserResponse,
    UserControllerFindUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/user/{id}',
    ...options,
  })
}

/**
 * Uploads a single file
 */
export const fileControllerUploadFile = <ThrowOnError extends boolean = false>(
  options: Options<FileControllerUploadFileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...formDataBodySerializer,
      url: '/api/v1/file/upload/single',
      ...options,
      headers: {
        'Content-Type': null,
        ...options?.headers,
      },
    },
  )
}

/**
 * Uploads multiple files
 */
export const fileControllerUploadFiles = <ThrowOnError extends boolean = false>(
  options: Options<FileControllerUploadFilesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>(
    {
      ...formDataBodySerializer,
      url: '/api/v1/file/upload/multiple',
      ...options,
      headers: {
        'Content-Type': null,
        ...options?.headers,
      },
    },
  )
}
